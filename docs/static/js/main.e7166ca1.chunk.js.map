{"version":3,"sources":["components/Score.js","components/Header.js","components/Wrapper.js","components/Pics.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","react_default","a","createElement","score","highScore","round","Header","className","href","id","components_Score","Wrapper","children","Pics","onClick","e","picClicked","target","src","alt","App","state","pics","localStorage","getItem","clickedIds","roundScore","gameOver","_this","setState","alert","youWin","addScore","setItem","push","onPickClicked","includes","_this2","this","components_Wrapper","components_Header","sort","b","Math","random","map","pic","index","components_Pics","key","image","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i9CASeA,SAND,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,qBAAaH,EAAMI,MAAnB,kBAAyCJ,EAAMK,UAA/C,aAAoEL,EAAMM,SCoBnEC,SArBA,SAACP,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eACbP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,iBAAiBD,UAAU,mBAAnC,eACAP,EAAAC,EAAAC,cAAA,MAAIO,GAAG,aAAaF,UAAU,SAC5BP,EAAAC,EAAAC,cAAA,UAEEF,EAAAC,EAAAC,cAACQ,EAAD,CACAP,MAAOJ,EAAMI,MACbC,UAAWL,EAAMK,UACjBC,MAAON,EAAMM,oBCRRM,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAeR,EAAMa,WCU9BC,SAXF,SAAAd,GAMX,OAAOC,EAAAC,EAAAC,cAAA,OAAKY,QAJU,SAACC,GACrBhB,EAAMiB,WAAWD,EAAEE,OAAOR,KAGQF,UAAU,sBAC9CP,EAAAC,EAAAC,cAAA,OAAKgB,IAAKnB,EAAMmB,IAAKC,IAAKpB,EAAMoB,IAAKV,GAAIV,EAAMU,eCsFlCW,6MAtFbC,MAAQ,CACJC,OACAnB,MAAO,EACPC,UAAWmB,aAAaC,QAAQ,kBAChCnB,MAAO,EACPoB,WAAY,GACZC,WAAY,KAIhBC,SAAW,WACTC,EAAKC,SAAS,CACZ1B,MAAO,EACPuB,WAAY,EACZD,WAAY,GACZpB,MAAO,IAGTyB,MAAM,wBAIRC,OAAS,WACPH,EAAKC,SAAS,CACZxB,MAAOuB,EAAKP,MAAMhB,MAAO,EACzBoB,WAAY,GACZC,WAAY,IAGdI,MAAM,gBAERE,SAAS,SAACvB,GACRmB,EAAKC,SAAS,CACZ1B,MAAOyB,EAAKP,MAAMlB,MAAO,EACzBuB,WAAYE,EAAKP,MAAMK,WAAY,GAElC,WACGE,EAAKP,MAAMlB,MAAQyB,EAAKP,MAAMjB,WAChCwB,EAAKC,SAAS,CACZzB,UAAWwB,EAAKP,MAAMlB,QAI1BoB,aAAaU,QAAQ,iBAAkBL,EAAKP,MAAMlB,OACpB,KAA1ByB,EAAKP,MAAMK,YACbE,EAAKG,SAEPH,EAAKP,MAAMI,WAAWS,KAAKzB,QAM/B0B,cAAc,SAAC1B,GAETmB,EAAKP,MAAMI,WAAWW,SAAS3B,GACjCmB,EAAKD,WAELC,EAAKI,SAASvB,4EAKT,IAAA4B,EAAAC,KACP,OACItC,EAAAC,EAAAC,cAACqC,EAAD,KACAvC,EAAAC,EAAAC,cAACsC,EAAD,CAAQrC,MAAOmC,KAAKjB,MAAMlB,MAAOE,MAAOiC,KAAKjB,MAAMhB,MAAOD,UAAWkC,KAAKjB,MAAMjB,YAC9EJ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAEZ+B,KAAKjB,MAAMC,KACXmB,KAAK,SAACxC,EAAGyC,GAAO,MAAO,GAAMC,KAAKC,WAElCC,IAAI,SAACC,EAAKC,GAAN,OACD/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAMC,IAAKF,EACX/B,WAAYqB,EAAKF,cACjBjB,IAAK4B,EAAII,MACT/B,IAAK2B,EAAIK,KACT1C,GAAIqC,EAAIrC,gBA/EN2C,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e7166ca1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// show th score and round\r\nconst Score = (props) => {\r\n    return(\r\n        <div>Score: {props.score} | High Score: {props.highScore} | Round: {props.round}</div>\r\n        )\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\nimport Score from './Score';\r\nimport '../css/Header.css';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <nav>\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"myporfolio.com\" className=\"left brand-logo\">Clicky-Game</a>\r\n      <ul id=\"nav-mobile\" className=\"right\">\r\n        <li>\r\n          {/* my little score card here */}\r\n          <Score \r\n          score={props.score} \r\n          highScore={props.highScore} \r\n          round={props.round}\r\n          />\r\n        </li>\r\n        \r\n      </ul>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"../css/Wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper row\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"../css/Pics.css\";\r\n\r\nconst Pics = props => {\r\n  // callback function to app.js\r\n  const localPicClick = (e) => {\r\n    props.picClicked(e.target.id);\r\n  }\r\n  // renders the pictures\r\n  return <div onClick={localPicClick} className=\"pics col s12 m4 l3\">\r\n  <img src={props.src} alt={props.alt} id={props.id} />\r\n</div>;\r\n};\r\n\r\nexport default Pics;\r\n","import React, { Component } from 'react';\nimport './css/App.css';\nimport Header from './components/Header'\nimport Wrapper from './components/Wrapper'\nimport Pics from './components/Pics'\nimport pics from \"./pics.json\";\n\n\nclass App extends Component {\n  \n  state = {\n      pics,\n      score: 0,\n      highScore: localStorage.getItem(\"localHighScore\"),\n      round: 1,\n      clickedIds: [],\n      roundScore: 0\n    } \n\n  // game over\n  gameOver = () => {\n    this.setState({\n      score: 0,\n      roundScore: 0,\n      clickedIds: [],\n      round: 1\n      \n    })\n    alert(\"Nooooo! You lost!\");\n  };\n  \n  \n  youWin = () => {\n    this.setState({\n      round: this.state.round +1,\n      clickedIds: [],\n      roundScore: 0\n\n    })\n    alert(\"You win!!\");\n  }\n  addScore=(id)=> {    \n    this.setState({\n      score: this.state.score +1,\n      roundScore: this.state.roundScore +1,\n      // pics: this.shuffle(this.state.pics)\n    }, ()=> {\n      if (this.state.score > this.state.highScore) {\n        this.setState({\n          highScore: this.state.score\n        })\n      }\n      // puts high score in local storage\n      localStorage.setItem('localHighScore', this.state.score);\n      if (this.state.roundScore === 12) {\n        this.youWin();\n      }\n      this.state.clickedIds.push(id)\n\n    });\n  }\n  \n\n  onPickClicked=(id)=> {\n    \n    if (this.state.clickedIds.includes(id)) {\n      this.gameOver();\n    }else{\n      this.addScore(id);\n    }\n    \n  };\n\n  render() {\n    return (\n        <Wrapper>\n        <Header score={this.state.score} round={this.state.round} highScore={this.state.highScore} />\n          <div className=\"container\">\n            {/* randomizes pics before map */}\n            {this.state.pics\n            .sort((a, b) => {return 0.5 - Math.random();})\n            // displays all pics\n            .map((pic, index) => \n                <Pics key={index} \n                picClicked={this.onPickClicked} \n                src={pic.image} \n                alt={pic.name} \n                id={pic.id} />)}\n          \n          </div>\n        </Wrapper>\n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}